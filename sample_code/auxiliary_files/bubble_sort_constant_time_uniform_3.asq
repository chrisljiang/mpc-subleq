# o = 0
o o

# i = n + 1
#   since loop exit condition is (--i <= 0),
#   start with i = n+1, so when it enters the first loop, i = n (after the --i)
#   last loop with i = 1
Z Z
i i
n Z
Z i
inc i

# is0 = is1 = arr_star + i - 1 = arr_star + n
is0 is0
is1 is1
arr_star Z
Z is0
Z is1

# if --i <= 0, exit sort
outer:dec i fetch
dec is0
dec is1

    # j = i
    #   see note for i above as to why j = i, not j = i-1
    Z Z
    j j
    i Z
    Z j

    # js0 = js1 = arr_star + j - 1
    js0 js0
    js1 js1
    arr_star Z
    inc Z
    Z js0
    Z js1

    # pre-clear Z
    Z Z

    # if --j <= 0, next loop
    inner:dec j outer
    dec js0
    dec js1

        # if *j > *i, swap ==> *j <= *i, jump ==> *j - *i <= 0, jump
        T T
        is0:0 T
        js0:0 Z
        Z T pad

        # swap
        # T = *j - *i
        # *i += T
        # *j -= T
        Z Z
        T Z
        jump:Z is1:0
        T js1:0

        # loop to inner
        Z Z inner

        # padding for security
        pad:Z Z
        T T jump

# fetch arr[idx]
fetch:Z Z
os os
arr_star Z
idx Z
Z os
Z Z
os:0 Z
Z o

# end
Z Z (-1)

. T:0
. Z:0
. dec:1
. inc:-1
. i:0
. j:0
. arr_star:arr_0
. o:0
. idx:0
. n:8
. arr_0:8
. arr_1:7
. arr_2:6
. arr_3:5
. arr_4:4
. arr_5:3
. arr_6:2
. arr_7:1

# -----
# 
# Sort array then get value at index idx
# 
# n = length of arr
# for (i = 0; i < n; ++i)
# {
#     for (j = i + 1; j < n; ++i)
#     {
#         if (arr[i] > arr[j])
#         {
#             temp = arr[i]
#             arr[i] = arr[j]
#             arr[j] = temp
#         }
#         else
#         {
#             // no ops for padding
#         }
#     }
# }
# 
# return arr[idx]
