# Copyright (c) 2009 David Roberts <d@vidr.cc>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Perform an in-place sort on the null-terminated string p using the bubble
# sort algorithm.

# void bubblesort(char *p) {
#     int swapped;
#     int a, b, i, j;
#     while(1) {
#         swapped = 0;
#         for(i = p, j = p+1; *j > 0; i++, j++) {
#             a = *i; b = *j;
#             if(a <= b) continue;
#             a -= b;
#             *i -= a; *j += a;
#             swapped++;
#         }
#         if(swapped <= 0) return;
#     }
# }

.bubblesort_swapped:0

.bubblesort_arg_p:0
bubblesort:
    bubblesort_swapped # swapped = 0
    # i = p
    bubblesort_i; bubblesort_i_; bubblesort_arg_p Z;
    Z bubblesort_i; Z bubblesort_i_; Z
    # j = p+1
    bubblesort_j; bubblesort_j_; bubblesort_j__; bubblesort_arg_p Z; dec Z;
    Z bubblesort_j; Z bubblesort_j_; Z bubblesort_j__; Z
    bubblesort_forloop:
        a; bubblesort_i:0 Z; Z a; Z # a = *i
        b; bubblesort_j:0 Z; Z b; Z # b = *j
        # goto next if a-b <= 0 (a <= b), a -= b (a = *i - *j)
        b a bubblesort_next
        # swap *i and *j
        a bubblesort_i_:0 # *i -= a (*i = *j)
        a Z; Z bubblesort_j_:0; Z # *j += a (*j = *i)
        inc bubblesort_swapped # swapped++
        bubblesort_next:
            inc bubblesort_i; inc bubblesort_i_ # i++
            inc bubblesort_j; inc bubblesort_j_; inc bubblesort_j__ # j++
            Z bubblesort_j__:0 bubblesort_endfor # goto endfor if *j <= 0
            Z Z bubblesort_forloop # goto forloop
    bubblesort_endfor:
    Z bubblesort_swapped bubblesort_return # return if swapped <= 0
    Z Z bubblesort # loop
bubblesort_return: Z Z bubblesort_return_address:-1
